
# import matplotlib.pyplot as plt; plt.rcdefaults()
# import numpy as np
# import matplotlib.pyplot as plt

# Defined the FileName of evenlog report
FileName 		= "abc.txt"

# Define the TTL of simulation
TTL      		= 2
SimulationTime 	= 4

# Define the Message type the we are required
Messages 		= { "DE":[], "S":[], "C":[] }

NotToInclude            = {}
# Input : 
#
#	Source (String) : Consist the source of device of which message is started transferring
#	Destination (String) : Consist the Destination of device of which message is transferred
#
# Processing :
# 	This function is calculating the latency of messages transferring from source and destination
#
# Output : 
#
#	Return the latency in Seconds.
#

def Get_Latency(Source,Destination):
	DeliveredI = {}
	DeliveredT = {}
	DeliveredV = {}

	TimeI = 0.00
	TimeT = 0.00
	TimeV = 0.00

	NoOfMEssagesI = 0
	NoOfMEssagesT = 0
	NoOfMEssagesV = 0

	for Event in Messages["DE"]:

		if ( 0 <= Event[2].find(Source) and 0 <= Event[3].find(Destination) ):
			if ( "I" == Event[4][1] ):
				DeliveredI[ Event[4] ] = float(Event[0])
			else:
				if ( "T" == Event[4][1] ):
					DeliveredT[ Event[4] ] = float(Event[0])
				else:
					if ( "V" == Event[4][1] ):
						DeliveredV[ Event[4] ] = float(Event[0])


	for Event in Messages["S"]:
		if ( 0 <= Event[2].find(Source) and 0 <= Event[3].find(Destination) ):
			if ( Event[4][1] == "I" and  Event[4] in DeliveredI ):
				NoOfMEssagesI += 1
				TimeI += DeliveredI[Event[4]] - float(Event[0])
			else:
				if ( Event[4][1] == "T" and  Event[4] in DeliveredT ):
					NoOfMEssagesT += 1
					TimeT += DeliveredT[Event[4]] - float(Event[0])
				else:
					if ( Event[4][1] == "V" and  Event[4] in DeliveredV ):
						NoOfMEssagesV += 1
						TimeV += DeliveredV[Event[4]] - float(Event[0])
	# print(DeliveredT)
	return DeliveredT

def Get_LatencyI(Source,Destination):
	DeliveredI = {}
	DeliveredT = {}
	DeliveredV = {}

	TimeI = 0.00
	TimeT = 0.00
	TimeV = 0.00

	NoOfMEssagesI = 0
	NoOfMEssagesT = 0
	NoOfMEssagesV = 0

	for Event in Messages["DE"]:

		if ( 0 <= Event[2].find(Source) and 0 <= Event[3].find(Destination) ):
			if ( "I" == Event[4][1] ):
				DeliveredI[ Event[4] ] = float(Event[0])
			else:
				if ( "T" == Event[4][1] ):
					DeliveredT[ Event[4] ] = float(Event[0])
				else:
					if ( "V" == Event[4][1] ):
						DeliveredV[ Event[4] ] = float(Event[0])


	for Event in Messages["S"]:
		if ( 0 <= Event[2].find(Source) and 0 <= Event[3].find(Destination) ):
			if ( Event[4][1] == "I" and  Event[4] in DeliveredI ):
				NoOfMEssagesI += 1
				TimeI += DeliveredI[Event[4]] - float(Event[0])
			else:
				if ( Event[4][1] == "T" and  Event[4] in DeliveredT ):
					NoOfMEssagesT += 1
					TimeT += DeliveredT[Event[4]] - float(Event[0])
				else:
					if ( Event[4][1] == "V" and  Event[4] in DeliveredV ):
						NoOfMEssagesV += 1
						TimeV += DeliveredV[Event[4]] - float(Event[0])
	# print(DeliveredT)
	return DeliveredI


def Get_TimeDTNtoADB(Source,Destination):
	DeliveredI = {}
	DeliveredT = {}
	DeliveredV = {}

	TimeI = 0.00
	TimeT = 0.00
	TimeV = 0.00

	NoOfMEssagesI = 0
	NoOfMEssagesT = 0
	NoOfMEssagesV = 0
	for Event in Messages["DE"]:

		if ( 0 <= Event[2].find(Source) and 0 <= Event[3].find(Destination) ):
			if ( "I" == Event[4][1] ):
				DeliveredI[ Event[4] ] = float(Event[0])
			else:
				if ( "T" == Event[4][1] ):
					DeliveredT[ Event[4] ] = float(Event[0])
				else:
					if ( "V" == Event[4][1] ):
						DeliveredV[ Event[4] ] = float(Event[0])


	for Event in Messages["S"]:
		if ( 0 <= Event[2].find(Source) and 0 <= Event[3].find(Destination) ):
			if ( Event[4][1] == "I" and  Event[4] in DeliveredI  and DeliveredI[Event[4]] - float(Event[0])>0 ):
				NoOfMEssagesI += 1
				DeliveredI[Event[4]]= DeliveredI[Event[4]] - float(Event[0])
			else:
				if ( Event[4][1] == "T" and  Event[4] in DeliveredT and DeliveredT[Event[4]] - float(Event[0])>0):
					NoOfMEssagesT += 1
					DeliveredT[Event[4]]= DeliveredT[Event[4]] - float(Event[0])
				else:
					if ( Event[4][1] == "V" and  Event[4] in DeliveredV and DeliveredV[Event[4]] - float(Event[0])>0):
						NoOfMEssagesV += 1
						DeliveredV[Event[4]]= DeliveredV[Event[4]] - float(Event[0])
	# print(DeliveredT)
	return DeliveredT

def Get_TimeDTNtoADBI(Source,Destination):
	DeliveredI = {}
	DeliveredT = {}
	DeliveredV = {}

	TimeI = 0.00
	TimeT = 0.00
	TimeV = 0.00

	NoOfMEssagesI = 0
	NoOfMEssagesT = 0
	NoOfMEssagesV = 0
	for Event in Messages["DE"]:

		if ( 0 <= Event[2].find(Source) and 0 <= Event[3].find(Destination) ):
			if ( "I" == Event[4][1] ):
				DeliveredI[ Event[4] ] = float(Event[0])
			else:
				if ( "T" == Event[4][1] ):
					DeliveredT[ Event[4] ] = float(Event[0])
				else:
					if ( "V" == Event[4][1] ):
						DeliveredV[ Event[4] ] = float(Event[0])


	for Event in Messages["S"]:
		if ( 0 <= Event[2].find(Source) and 0 <= Event[3].find(Destination) ):
			if ( Event[4][1] == "I" and  Event[4] in DeliveredI  and DeliveredI[Event[4]] - float(Event[0])>0 ):
				NoOfMEssagesI += 1
				DeliveredI[Event[4]]= DeliveredI[Event[4]] - float(Event[0])
			else:
				if ( Event[4][1] == "T" and  Event[4] in DeliveredT and DeliveredT[Event[4]] - float(Event[0])>0):
					NoOfMEssagesT += 1
					DeliveredT[Event[4]]= DeliveredT[Event[4]] - float(Event[0])
				else:
					if ( Event[4][1] == "V" and  Event[4] in DeliveredV and DeliveredV[Event[4]] - float(Event[0])>0):
						NoOfMEssagesV += 1
						DeliveredV[Event[4]]= DeliveredV[Event[4]] - float(Event[0])
	# print(DeliveredT)
	return DeliveredI

def Get_TimeDTNtoADBV(Source,Destination):
	DeliveredI = {}
	DeliveredT = {}
	DeliveredV = {}

	TimeI = 0.00
	TimeT = 0.00
	TimeV = 0.00

	NoOfMEssagesI = 0
	NoOfMEssagesT = 0
	NoOfMEssagesV = 0
	for Event in Messages["DE"]:

		if ( 0 <= Event[2].find(Source) and 0 <= Event[3].find(Destination) ):
			if ( "I" == Event[4][1] ):
				DeliveredI[ Event[4] ] = float(Event[0])
			else:
				if ( "T" == Event[4][1] ):
					DeliveredT[ Event[4] ] = float(Event[0])
				else:
					if ( "V" == Event[4][1] ):
						DeliveredV[ Event[4] ] = float(Event[0])


	for Event in Messages["S"]:
		if ( 0 <= Event[2].find(Source) and 0 <= Event[3].find(Destination) ):
			if ( Event[4][1] == "I" and  Event[4] in DeliveredI  and DeliveredI[Event[4]] - float(Event[0])>0 ):
				NoOfMEssagesI += 1
				DeliveredI[Event[4]]= DeliveredI[Event[4]] - float(Event[0])
			else:
				if ( Event[4][1] == "T" and  Event[4] in DeliveredT and DeliveredT[Event[4]] - float(Event[0])>0):
					NoOfMEssagesT += 1
					DeliveredT[Event[4]]= DeliveredT[Event[4]] - float(Event[0])
				else:
					if ( Event[4][1] == "V" and  Event[4] in DeliveredV and DeliveredV[Event[4]] - float(Event[0])>0):
						NoOfMEssagesV += 1
						DeliveredV[Event[4]]= DeliveredV[Event[4]] - float(Event[0])
	# print(DeliveredT)
	return DeliveredV


def Get_LatencyV(Source,Destination):
	DeliveredI = {}
	DeliveredT = {}
	DeliveredV = {}

	TimeI = 0.00
	TimeT = 0.00
	TimeV = 0.00

	NoOfMEssagesI = 0
	NoOfMEssagesT = 0
	NoOfMEssagesV = 0

	for Event in Messages["DE"]:

		if ( 0 <= Event[2].find(Source) and 0 <= Event[3].find(Destination) ):
			if ( "I" == Event[4][1] ):
				DeliveredI[ Event[4] ] = float(Event[0])
			else:
				if ( "T" == Event[4][1] ):
					DeliveredT[ Event[4] ] = float(Event[0])
				else:
					if ( "V" == Event[4][1] ):
						DeliveredV[ Event[4] ] = float(Event[0])


	for Event in Messages["S"]:
		if ( 0 <= Event[2].find(Source) and 0 <= Event[3].find(Destination) ):
			if ( Event[4][1] == "I" and  Event[4] in DeliveredI ):
				NoOfMEssagesI += 1
				TimeI += DeliveredI[Event[4]] - float(Event[0])
			else:
				if ( Event[4][1] == "T" and  Event[4] in DeliveredT ):
					NoOfMEssagesT += 1
					TimeT += DeliveredT[Event[4]] - float(Event[0])
				else:
					if ( Event[4][1] == "V" and  Event[4] in DeliveredV ):
						NoOfMEssagesV += 1
						TimeV += DeliveredV[Event[4]] - float(Event[0])
	# print(DeliveredT)
	return DeliveredV



def ADB_To_CD():
	temphop={}
	temphop1={}
	temphop2={}
	hop2={}
	hop3={}
	su=0.0
	count=0
	hop1=Get_TimeDTNtoADB("dtn","ADB")#calling the respective functions
	hop21=Get_Latency("ADB","CD")#i.e. Get_Latency()for text time Get_LatencyI()for image latency
	hop22=Get_Latency("CD","ADB")#and Get_LatencyV()for Video Latency.
	for x in hop21:
		if(x in hop1):
			temphop[x]=hop21[x]-hop1[x]
	for x in hop22:
		if(x in hop21 and hop22[x]-hop21[x]>0):
			temphop1[x]=hop22[x]-hop21[x]
	for x in temphop1:
		if(x in temphop):
			hop2[x]=temphop1[x]+temphop[x]
	hop31=Get_Latency("ADB","WIFI")
	for x in hop31:
		if(x in hop2):
			temphop[x]=hop31[x]-hop22[x]
	hop32=Get_Latency("WIFI","WIFI")
	for x in hop32:
		if(x in hop2):
			temphop1[x]=hop32[x]-hop31[x]
	hop33=Get_Latency("WIFI","ADB")
	for x in hop33:
		if(x in hop2):
			temphop2[x]=hop33[x]-hop32[x]
	for x in temphop2:
		if(x in temphop1 and x in temphop and temphop2[x]>0):
			hop3[x]=temphop[x]+temphop1[x]+temphop2[x]
	for x in hop1:
		su+=hop1[x]
		count+=1
	# print("Text latency hop1 : ",su/count," ",count)
	count=0
	for x in hop2:
		su+=hop2[x]
		count+=1
	#print(hop1)
	i=0
	h1={}
	for x in hop1:
		if(i==100):
			break
		i+=1
		h1[x]=hop1[x]

	# print(h1)
	# print("Text latency hop2 :  ",su/count," ",count)
	i=0
	h2={}
	for x in hop2:
		if(i==100):
			break
		h2[x]=hop2[x]
		i+=1
	# print(h2)
	i=0
	h3={}
	for x in hop3:
		if(i==100):
			break
		h3[x]=hop3[x]
		i+=1
	# print(h3)
	su=0.0
	count=0
	for s in h1:
		su+=h1[s];
		count+=1
	print("Video latency hop1 :",su/count)
	su=0.0
	count=0
	for s in h2:
		su+=h2[s];
		count+=1
	print("Video latency hop2 :",su/count)
	su=0.0
	count=0
	for s in h3:
		su+=h3[s];
		count+=1
	print("Video latency hop3 :",su/count)
	# count=0
	# for x in hop3:
	# 	su+=hop3[x]
	# 	count+=1
	#print(hop3)
	# print("Text latency hop3 : ",su/count," ",count)



# Parsing the messages accoring to status in an dictionary
def Parse_Status(Messages, Status):
	global NotToInclude
	TTLInSeconds           	= TTL * 60 * 60 
	SimulationTimeInSecond 	= SimulationTime * 60 * 60
	Threshold 			   	=  SimulationTimeInSecond - TTLInSeconds
	print (Threshold)
	FileData 				= open(FileName,"r").read().split("\n")	
	for StatusRow in FileData:

		StatusRow = StatusRow.split(" ")
		if ( 2 < len(StatusRow) and Status == StatusRow[1] ):
			if( (not Status == 'DE') and float(StatusRow[0]) > Threshold ):
				NotToInclude[StatusRow[-4]]=StatusRow[0]+" "+StatusRow[1]
				continue
			if ( Status == 'DE' and StatusRow[-4] in NotToInclude):
				continue
			Messages[Status].append(StatusRow)

def GetCreatedDTN():

	MessagesTemp = {}
	CreatedI = 0
	CreatedT = 0
	CreatedV = 0

	DeliveredI = 0
	DeliveredT = 0
	DeliveredV = 0

	for Event in Messages["C"]:
		if ( "T" == Event[3][1] ):
			CreatedT += 1
		else:
			if ( "I" == Event[3][1] ):
				CreatedI += 1
			else:
				if ( "V" == Event[3][1] ):
					CreatedV += 1

	# for Event in Messages["DE"]:

	# 	if ( 0 <= Event[2].find("dtn") and 0 <= Event[3].find("ADB") ):
	# 		if ( Event[4] in MessagesTemp):
	# 			continue
	# 		else:
	# 			MessagesTemp[Event[4]]=""
	# 		if ( "I" == Event[4][1] ):
	# 			DeliveredI += 1
			
	# 		else:
	# 			if ( "T" == Event[4][1] ):
	# 				DeliveredT += 1
			
	# 			else:
	# 				if ( "V" == Event[4][1] ):
	# 					DeliveredV += 1
	return [CreatedT,CreatedI,CreatedV]

def GetDelivery(PreviousSource, Source, Destination):
    DI=0
    DT=0
    DV=0

    MessagesTemp={}

    for Event in Messages["DE"]:
        if(0<=Event[2].find(Source) and 0<=Event[3].find(Destination)):
            if(Event[4] in MessagesTemp):
                continue
            else:
                MessagesTemp[Event[4]]=""
            if("I" == Event[4][1]):
                DI+=1
            elif("T" == Event[4][1]):
                DT+=1
            elif("V" == Event[4][1]):
                DV+=1

    # for Event in Messages["DE"]:
    #     if ( 0 <= Event[2].find(Source) and 0 <= Event[3].find(Destination)):
    #         if ( Event[4] in MessagesTemp):
    #             continue
	# 		else:
	# 		    MessagesTemp[Event[4]]=""
	# 	    if ( "I" == Event[4][1] ):
	# 			DI += 1
			
	# 		else:
	# 			if ( "T" == Event[4][1] ):
	# 				DT += 1
			
	# 			else:
	# 				if ( "V" == Event[4][1] ):
	# 					DV += 1
    
    return [DT,DI,DV]



def main():

	Parse_Status(Messages,"S")
	Parse_Status(Messages,"C")
	Parse_Status(Messages,"DE")
	
	
	ADB_To_CD()


main()
Created=GetCreatedDTN()
Deliver=GetDelivery("WIFI","WIFI","ADB")

print("Delivery Probability Text : ",Deliver[0]/Created[0],"\n")
print("Delivery Probability Image : ",Deliver[1]/Created[1],"\n")
print("Delivery Probability Video : ",Deliver[2]/Created[2],"\n")
print("Delivery Probability overall : ",(Deliver[0]+Deliver[1]+Deliver[2])/(Created[0]+Created[1]+Created[2]),"\n")
